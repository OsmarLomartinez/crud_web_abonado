import pyodbc

# üîó Conexi√≥n
conn = pyodbc.connect(
    'DRIVER={ODBC Driver 17 for SQL Server};'
    'SERVER=26.174.243.172;'
    'DATABASE=db_conexiondigital;'
    'UID=Osmar;'
    'PWD=osmar;'
)
cursor = conn.cursor()

# ‚úÖ Mostrar filiales disponibles
def mostrar_filiales():
    print("\nüî∏ Filiales disponibles:")
    cursor.execute("SELECT idFilial, NombreFilial FROM Filial")
    filiales = cursor.fetchall()
    for f in filiales:
        print(f"{f[0]}. {f[1]}")
    return [f[0] for f in filiales]  # retorna solo los IDs v√°lidos

# ‚úÖ Insertar abonado con selecci√≥n de filial
def insertar_abonado():
    print("\nüîπ INSERTAR NUEVO ABONADO")
    paterno = input("Apellido paterno: ").upper()
    materno = input("Apellido materno: ").upper()
    pnombre = input("Primer nombre: ").capitalize()
    snombre = input("Segundo nombre: ").capitalize()
    numdoc = input("N√∫mero de documento: ")
    numcasa = input("Direcci√≥n (NumCasa): ")

    # Mostrar filiales y validar
    filiales_validas = mostrar_filiales()
    while True:
        try:
            id_filial = int(input("Seleccione ID de filial: "))
            if id_filial in filiales_validas:
                break
            else:
                print("‚ùå ID inv√°lido. Intente nuevamente.")
        except ValueError:
            print("‚ùå Ingrese un n√∫mero v√°lido.")

    cursor.execute("""
        INSERT INTO Abonado (Paterno, Materno, PNombre, SNombre, NumDocIdentidad, NumCasa, idFilial)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (paterno, materno, pnombre, snombre, numdoc, numcasa, id_filial))
    conn.commit()
    print("‚úÖ Abonado insertado correctamente.\n")

# ‚úÖ Mostrar abonados
# ‚úÖ Mostrar abonados (solo los 50 m√°s recientes para optimizar rendimiento)
def mostrar_abonados():
    print("\nüîπ MOSTRANDO LOS 50 ABONADOS M√ÅS RECIENTES")
    cursor.execute("""
        SELECT TOP 50 A.IdAbonado, A.Paterno, A.Materno, A.PNombre, A.SNombre, 
                       A.NumDocIdentidad, A.NumCasa, F.DescripcionFilial
        FROM Abonado A
        INNER JOIN Filial F ON A.idFilial = F.idFilial
        ORDER BY A.IdAbonado DESC
    """)
    rows = cursor.fetchall()
    for row in rows:
        print(row)



# ‚úÖ Actualizar abonado
def actualizar_abonado():
    print("\nüîπ ACTUALIZAR ABONADO")
    id_abonado = input("ID del abonado a actualizar: ")
    nuevo_pnombre = input("Nuevo primer nombre: ").capitalize()
    nuevo_snombre = input("Nuevo segundo nombre: ").capitalize()
    nueva_direccion = input("Nueva direcci√≥n: ")

    cursor.execute("""
        UPDATE Abonado
        SET PNombre = ?, SNombre = ?, NumCasa = ?
        WHERE IdAbonado = ?
    """, (nuevo_pnombre, nuevo_snombre, nueva_direccion, id_abonado))
    conn.commit()
    print("‚úÖ Abonado actualizado correctamente.\n")

# ‚úÖ Eliminar abonado
def eliminar_abonado():
    print("\nüîπ ELIMINAR ABONADO")
    id_abonado = input("ID del abonado a eliminar: ")
    confirmar = input("¬øSeguro que deseas eliminar este abonado? (s/n): ")
    if confirmar.lower() == 's':
        cursor.execute("DELETE FROM Abonado WHERE IdAbonado = ?", (id_abonado,))
        conn.commit()
        print("‚úÖ Abonado eliminado correctamente.\n")
    else:
        print("‚ùå Operaci√≥n cancelada.")

# ‚úÖ Men√∫ principal
def menu():
    while True:
        print("\n===== MEN√ö CRUD ABONADO =====")
        print("1. Insertar abonado")
        print("2. Mostrar abonados")
        print("3. Actualizar abonado")
        print("4. Eliminar abonado")
        print("5. Salir")
        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            insertar_abonado()
        elif opcion == "2":
            mostrar_abonados()
        elif opcion == "3":
            actualizar_abonado()
        elif opcion == "4":
            eliminar_abonado()
        elif opcion == "5":
            print("üëã Cerrando conexi√≥n y saliendo...")
            cursor.close()
            conn.close()
            break
        else:
            print("‚ùå Opci√≥n inv√°lida.")

# üîÅ Ejecutar men√∫
menu()

